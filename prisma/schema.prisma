generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONN")
}

model users {
  id                     BigInt         @id @default(autoincrement())
  name                   String?
  email                  String?        @unique(map: "uni_users_email")
  telephone              String?        @unique(map: "uni_users_telephone")
  role                   String?
  password               String?
  chatRooms              String[]       @default([])
  created_at             DateTime?      @db.Timestamptz(6)
  updated_at             DateTime?      @db.Timestamptz(6)
  deleted_at             DateTime?      @db.Timestamptz(6)
  restaurant_id          BigInt?
  RestaurantChatSessions chatSessions[] @relation("RestaurantChat")
  UserChatSessions       chatSessions[] @relation("UserChat")
  comments               comments[]
  reservations           reservations[]
  restaurants            restaurants[]

  @@index([deleted_at], map: "idx_users_deleted_at")
}

model chatSessions {
  id           String   @id @default(uuid())
  msgs         String[] @default([])
  userId       BigInt
  restaurantId BigInt
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  restaurant   users    @relation("RestaurantChat", fields: [restaurantId], references: [id])
  user         users    @relation("UserChat", fields: [userId], references: [id])

  @@index([userId])
}

model reservations {
  id            BigInt       @id @default(autoincrement())
  date_time     DateTime?    @db.Timestamptz(6)
  table_num     BigInt?
  exit_time     DateTime?    @db.Timestamptz(6)
  user_id       BigInt?
  restaurant_id BigInt?
  created_at    DateTime?    @db.Timestamptz(6)
  updated_at    DateTime?    @db.Timestamptz(6)
  deleted_at    DateTime?    @db.Timestamptz(6)
  restaurant    restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservations_restaurant")
  user          users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservations_user")

  @@index([deleted_at], map: "idx_reservations_deleted_at")
}

model restaurants {
  id            BigInt         @id @default(autoincrement())
  name          String?
  address       String?
  telephone     String?
  open_time     String?
  close_time    String?
  instagram     String?
  facebook      String?
  description   String?
  image_url     String?
  created_at    DateTime       @db.Timestamptz(6)
  updated_at    DateTime?      @db.Timestamptz(6)
  deleted_at    DateTime?      @db.Timestamptz(6)
  usersId       BigInt?
  rating        Decimal?       @default(0) @db.Decimal
  comment_count Decimal?       @default(0) @db.Decimal
  comments      comments[]
  reservations  reservations[]
  user          users?         @relation(fields: [usersId], references: [id])

  @@index([deleted_at], map: "idx_restaurants_deleted_at")
}

model msgSessions {
  id         String   @id @default(uuid())
  msg        String?
  senderId   BigInt?
  receiverId BigInt?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model comments {
  id            BigInt       @id @default(autoincrement())
  date_time     DateTime?    @db.Timestamptz(6)
  my_comment    String?
  rating        Decimal?     @db.Decimal
  user_id       BigInt?
  restaurant_id BigInt?
  created_at    DateTime?    @db.Timestamptz(6)
  updated_at    DateTime?    @db.Timestamptz(6)
  deleted_at    DateTime?    @db.Timestamptz(6)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_restaurant")
  users         users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_user")

  @@index([deleted_at], map: "idx_comments_deleted_at")
}
