generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONN")
}

model users {
  id         BigInt    @id @default(autoincrement())
  name       String?
  email      String?
  telephone  String?
  role       String?
  password   String?
  chatRooms  String[]  @default([]) // List of Chat Room Ids
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)

  // A List of User Chat Session
  UserChatSessions chatSessions[] @relation("UserChat")

  // If User is a Restaurant, It will be related to the restaurant
  restaurant_id BigInt?      @unique
  restaurant    restaurants? @relation(fields: [restaurant_id], references: [id])

  // List of User Reservation
  reservations           reservations[]
  RestaurantChatSessions chatSessions[] @relation("RestaurantChat")

  @@index([deleted_at], map: "idx_users_deleted_at")
}

model chatSessions {
  id           String   @id @default(uuid())
  msgs         String[] @default([]) // List of Message ids
  userId       BigInt
  restaurantId BigInt
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         users    @relation("UserChat", fields: [userId], references: [id])
  restaurant   users    @relation("RestaurantChat", fields: [restaurantId], references: [id])

  @@index([userId])
}

model reservations {
  id            BigInt    @id @default(autoincrement())
  date_time     DateTime? @db.Timestamptz(6)
  table_num     BigInt?
  exit_time     DateTime? @db.Timestamptz(6)
  user_id       BigInt?
  restaurant_id BigInt?
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)

  user       users?       @relation(fields: [user_id], references: [id])
  restaurant restaurants? @relation(fields: [restaurant_id], references: [id])

  @@index([deleted_at], map: "idx_reservations_deleted_at")
}

model restaurants {
  id           BigInt         @id @default(autoincrement())
  name         String?
  address      String?
  telephone    String?
  open_time    String?
  close_time   String?
  instagram    String?
  facebook     String?
  description  String?
  image_url    String?
  chatRooms    String[]       @default([])
  created_at   DateTime       @db.Timestamptz(6)
  updated_at   DateTime?      @db.Timestamptz(6)
  deleted_at   DateTime?      @db.Timestamptz(6)
  user         users?
  reservations reservations[]

  @@index([deleted_at], map: "idx_restaurants_deleted_at")
}

model msgSessions {
  id         String   @id @default(uuid())
  msg        String?
  senderId   BigInt?
  receiverId BigInt?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
